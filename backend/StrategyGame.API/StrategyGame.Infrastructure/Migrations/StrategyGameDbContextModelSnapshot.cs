// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StrategyGame.Infrastructure;

namespace StrategyGame.Infrastructure.Migrations
{
    [DbContext(typeof(StrategyGameDbContext))]
    partial class StrategyGameDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("StrategyGame.Domain.Game.Battle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AtkPlayer")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AtkPower")
                        .HasColumnType("int");

                    b.Property<Guid>("DefPlayer")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TimeLeft")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Battles");
                });

            modelBuilder.Entity("StrategyGame.Domain.Game.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid>("BuildingDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StrategyGameUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BuildingDataId");

                    b.HasIndex("StrategyGameUserId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("StrategyGame.Domain.Game.BuildingData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FactoryParametersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FactoryParametersId");

                    b.ToTable("BuildingDatas");
                });

            modelBuilder.Entity("StrategyGame.Domain.Game.BuildingPrice", b =>
                {
                    b.Property<int>("Key")
                        .HasColumnType("int");

                    b.Property<Guid?>("BuildingDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Key");

                    b.HasIndex("BuildingDataId");

                    b.ToTable("BuildingPrice");
                });

            modelBuilder.Entity("StrategyGame.Domain.Game.FactoryParameters", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PassiveIncome")
                        .HasColumnType("int");

                    b.Property<int>("ResourceType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FactoryParameters");
                });

            modelBuilder.Entity("StrategyGame.Domain.Game.Gathering", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CalcualtedReward")
                        .HasColumnType("int");

                    b.Property<Guid>("GatheringDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StrategyGameUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TimeLeft")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GatheringDataId");

                    b.HasIndex("StrategyGameUserId");

                    b.ToTable("Gatherings");
                });

            modelBuilder.Entity("StrategyGame.Domain.Game.GatheringData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxTimeAllowed")
                        .HasColumnType("int");

                    b.Property<int>("MaximumBaseReward")
                        .HasColumnType("int");

                    b.Property<int>("MinimumBaseReward")
                        .HasColumnType("int");

                    b.Property<int>("TimeMultiplier")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GatheringDatas");
                });

            modelBuilder.Entity("StrategyGame.Domain.Game.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid>("ResourceDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StrategyGameUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ResourceDataId");

                    b.HasIndex("StrategyGameUserId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("StrategyGame.Domain.Game.ResourceData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ResourceDatas");
                });

            modelBuilder.Entity("StrategyGame.Domain.Game.Round", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Current")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Round");
                });

            modelBuilder.Entity("StrategyGame.Domain.Game.Scoreboard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<Guid>("StrategyGameUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StrategyGameUserId");

                    b.ToTable("Scoreboard");
                });

            modelBuilder.Entity("StrategyGame.Entities.Domain.StrategyGameRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("StrategyGame.Entities.Domain.StrategyGameUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("StrategyGame.Entities.Domain.StrategyGameUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("StrategyGame.Entities.Domain.StrategyGameRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("StrategyGame.Entities.Domain.StrategyGameUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("StrategyGame.Entities.Domain.StrategyGameUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("StrategyGame.Entities.Domain.StrategyGameUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StrategyGame.Domain.Game.Building", b =>
                {
                    b.HasOne("StrategyGame.Domain.Game.BuildingData", "BuildingData")
                        .WithMany()
                        .HasForeignKey("BuildingDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StrategyGame.Entities.Domain.StrategyGameUser", "StrategyGameUser")
                        .WithMany("Buildings")
                        .HasForeignKey("StrategyGameUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BuildingData");

                    b.Navigation("StrategyGameUser");
                });

            modelBuilder.Entity("StrategyGame.Domain.Game.BuildingData", b =>
                {
                    b.HasOne("StrategyGame.Domain.Game.FactoryParameters", "FactoryParameters")
                        .WithMany()
                        .HasForeignKey("FactoryParametersId");

                    b.Navigation("FactoryParameters");
                });

            modelBuilder.Entity("StrategyGame.Domain.Game.BuildingPrice", b =>
                {
                    b.HasOne("StrategyGame.Domain.Game.BuildingData", null)
                        .WithMany("Cost")
                        .HasForeignKey("BuildingDataId");
                });

            modelBuilder.Entity("StrategyGame.Domain.Game.Gathering", b =>
                {
                    b.HasOne("StrategyGame.Domain.Game.GatheringData", "GatheringData")
                        .WithMany()
                        .HasForeignKey("GatheringDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StrategyGame.Entities.Domain.StrategyGameUser", "StrategyGameUser")
                        .WithMany("Gatherings")
                        .HasForeignKey("StrategyGameUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GatheringData");

                    b.Navigation("StrategyGameUser");
                });

            modelBuilder.Entity("StrategyGame.Domain.Game.Resource", b =>
                {
                    b.HasOne("StrategyGame.Domain.Game.ResourceData", "ResourceData")
                        .WithMany()
                        .HasForeignKey("ResourceDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StrategyGame.Entities.Domain.StrategyGameUser", "StrategyGameUser")
                        .WithMany("Resources")
                        .HasForeignKey("StrategyGameUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResourceData");

                    b.Navigation("StrategyGameUser");
                });

            modelBuilder.Entity("StrategyGame.Domain.Game.Scoreboard", b =>
                {
                    b.HasOne("StrategyGame.Entities.Domain.StrategyGameUser", "StrategyGameUser")
                        .WithMany()
                        .HasForeignKey("StrategyGameUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StrategyGameUser");
                });

            modelBuilder.Entity("StrategyGame.Entities.Domain.StrategyGameUserRole", b =>
                {
                    b.HasOne("StrategyGame.Entities.Domain.StrategyGameRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StrategyGame.Entities.Domain.StrategyGameUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StrategyGame.Domain.Game.BuildingData", b =>
                {
                    b.Navigation("Cost");
                });

            modelBuilder.Entity("StrategyGame.Entities.Domain.StrategyGameUser", b =>
                {
                    b.Navigation("Buildings");

                    b.Navigation("Gatherings");

                    b.Navigation("Resources");
                });
#pragma warning restore 612, 618
        }
    }
}
